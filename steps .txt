                                         DOCUMENTATION

here i am going to write the steps i do in this project 
and also some imp points in the project.

1- we cannot store the pictures and other things in the database directly so we need to store those things 
   in a different plase int he server and then we upload it to the coludnary

2- we make gitkeep to keep the folders that are not to be pushed in the git directly.

3- all the sensitive file that are not to be pushed are kept in the ".gitignore" .

    now the things you dont need to send to the git can be generated by gitignore generators, and there are many.

4- the dotenv files(.env) are the environmet valiables the contain imp info like the api's or the password
   that shoul not be the part of the code thus we make env to make them safe.
   we install the dotenv package that changest the port value and the info that a program asks for 
   to run is passed through the env ports thus keeping the imp info safe , means like these things are
   not written with the main code but are accesed thorough different port.

  => these are to be written inside the gitignore .

5- to make files inside a folder you can use touch command in the terminal and then write file names to make
   them as a shortcut way just saying.

6- next is the nodemon . this restarts the server whenever the files are saved. like whenever we write something 
   in the index.js it will restart the server adter saving it.

7-after commiting all the imp files or making the initial imp. files we make the folder which contains the 
  imp. things like contrillers , db (hoow to connect to the database) middle wares etc.
  we are using the mkdir command to make these folders , this command is used to make the directories. 

8- we added pritier so that the code for all the team looks same and there are no differences in the codes
   of the different people.

9- Now when you have written everthing in yhe env , now to connect to the database we can write the connection
   function in different type but we use the "ifes => ()() this type os syntax . there merit is that they are 
   executed instanatly , which is required in database deployment.".This code is written in Index file.
   As its understandable , always use the async await while writing this function and then use try catch for 
   error handling.

10-after db connection then we , LISTEN the database . that is done in the index.js page that will 
   help us run the app.js. then we use app.listen in then() to tell the express from where the connection 
   is starting and thoroughwhere the data is interchanging like ports and env ect. . 

11-now we make the modals required that make the db structure . before that we made the utils of different kinds.
   now while working with the modals we installed the aggregate panigate npm for using the aggregate function,
   and the we installed the bycrypt "the core bcrypt the nodejs one".bcrypt helps in the hashing of the passwords.
   then we installed the json web token for data encryption and decryption while sending and recieving.

12-after making models and installing those pacakages mentioned above we made some methods for token generation
   and i have commented that there.

13- now we install the 'cloudnary' for clous storage and the 'multer' as the uploader.
   there are 2 waysfor file handling. one is to directly take the file from the user throug multer and store
   directly in the cloudnary , or in industry we first take the file and temporally store in our servers and then upload
   it to the cloud , but we will skip it and do it the simple way .
   here we learn about the "FS" the file system of node.js that is inbuilt in the node.it is all written in the 
   "utils file of upload_content". we can use documentation .

14-we here are learning abiut some of the importants ones , not have to learn all.
   in utils folder in upload_content file we made the upload function and now we are making use of the multer.
   The code for uploading using multer can be written directly also whereever we want , but we are going to make 
   a middleware of it so that it can be called whenever needed.

15-we made the first middleware for the user and made the user router also. here we learnt how we use different code 
   to direct from one code to another code of the different folder and take use of this shit.
   Lets write the steps that I understood:-
   1- as we write npm run dev the script starts and runs the index.js.
   2- the index.js calls the db connection thus our database is connected.Here we use the '.then' function 
      on the dbconnect() this helps to use app functions on it.
      we use the .listen on the app (the app.js) and then we run the system.
   3-Now as it runs /user is hit then it passes it on to userrouter -> then userrouter has /register and that has
      .post function -> that calls the register user function in the user controller in the controller folder.
   4-As the register user had a json reponse , to read that we can use an application that is called the postman.
   * we will learn about the postman in the coming videos.

16- now we will start the regester user with the controller code in it.
   we have to always think about the steps we want to take when making a new controller like what we need etc.
   => here are the steps :-
                  get user details from the frontend. // here we do not have the frontend but will use the postman.
                  validation.
                  check is the username exeist // unique.
                  check for the image, check for the avatar. // here we see the model we created for the user.
                  upload to the cloudinary
                  then we create a object as to upload in the db we have to make a object.
                               (here the syntax is [.create]).
                  then we remove the password and refresh token from the response. 
                  check for the user creation.
                  return response.                
         in these steps there is no file handling support thus we will be doing the "multer" middleware importing 
         and making files with its help.
      now after the use of the multer, we will apply the conditions in the user.controller 
         here we will use the if else statement for the conditions but can use the advanced JS functions like the
         "SOME" which can be used with array arguments and answer as true false.  // go to user.controller for code. 
      while putting checks on the images and avatar we found that in express we have req.body to ask for any ref's
      multer provides req.files.
    - now after uploading on the cloud we will make the object and the object is communicated throug the user model.
      
